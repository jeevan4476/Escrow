/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ESCROW_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const TAKE_OFFER_DISCRIMINATOR = new Uint8Array([
  128, 156, 242, 207, 237, 192, 103, 240,
]);

export function getTakeOfferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TAKE_OFFER_DISCRIMINATOR);
}

export type TakeOfferInstruction<
  TProgram extends string = typeof ESCROW_PROGRAM_ADDRESS,
  TAccountTaker extends string | IAccountMeta<string> = string,
  TAccountMaker extends string | IAccountMeta<string> = string,
  TAccountTokenMintA extends string | IAccountMeta<string> = string,
  TAccountTokenMintB extends string | IAccountMeta<string> = string,
  TAccountTakerTokenAccountA extends string | IAccountMeta<string> = string,
  TAccountTakerTokenAccountB extends string | IAccountMeta<string> = string,
  TAccountMakerTokenAccountB extends string | IAccountMeta<string> = string,
  TAccountOffer extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTaker extends string
        ? WritableSignerAccount<TAccountTaker> &
            IAccountSignerMeta<TAccountTaker>
        : TAccountTaker,
      TAccountMaker extends string
        ? WritableAccount<TAccountMaker>
        : TAccountMaker,
      TAccountTokenMintA extends string
        ? ReadonlyAccount<TAccountTokenMintA>
        : TAccountTokenMintA,
      TAccountTokenMintB extends string
        ? ReadonlyAccount<TAccountTokenMintB>
        : TAccountTokenMintB,
      TAccountTakerTokenAccountA extends string
        ? WritableAccount<TAccountTakerTokenAccountA>
        : TAccountTakerTokenAccountA,
      TAccountTakerTokenAccountB extends string
        ? WritableAccount<TAccountTakerTokenAccountB>
        : TAccountTakerTokenAccountB,
      TAccountMakerTokenAccountB extends string
        ? WritableAccount<TAccountMakerTokenAccountB>
        : TAccountMakerTokenAccountB,
      TAccountOffer extends string
        ? WritableAccount<TAccountOffer>
        : TAccountOffer,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TakeOfferInstructionData = { discriminator: ReadonlyUint8Array };

export type TakeOfferInstructionDataArgs = {};

export function getTakeOfferInstructionDataEncoder(): Encoder<TakeOfferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: TAKE_OFFER_DISCRIMINATOR })
  );
}

export function getTakeOfferInstructionDataDecoder(): Decoder<TakeOfferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getTakeOfferInstructionDataCodec(): Codec<
  TakeOfferInstructionDataArgs,
  TakeOfferInstructionData
> {
  return combineCodec(
    getTakeOfferInstructionDataEncoder(),
    getTakeOfferInstructionDataDecoder()
  );
}

export type TakeOfferAsyncInput<
  TAccountTaker extends string = string,
  TAccountMaker extends string = string,
  TAccountTokenMintA extends string = string,
  TAccountTokenMintB extends string = string,
  TAccountTakerTokenAccountA extends string = string,
  TAccountTakerTokenAccountB extends string = string,
  TAccountMakerTokenAccountB extends string = string,
  TAccountOffer extends string = string,
  TAccountVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  taker: TransactionSigner<TAccountTaker>;
  maker: Address<TAccountMaker>;
  tokenMintA: Address<TAccountTokenMintA>;
  tokenMintB: Address<TAccountTokenMintB>;
  takerTokenAccountA?: Address<TAccountTakerTokenAccountA>;
  takerTokenAccountB?: Address<TAccountTakerTokenAccountB>;
  makerTokenAccountB?: Address<TAccountMakerTokenAccountB>;
  offer: Address<TAccountOffer>;
  vault?: Address<TAccountVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getTakeOfferInstructionAsync<
  TAccountTaker extends string,
  TAccountMaker extends string,
  TAccountTokenMintA extends string,
  TAccountTokenMintB extends string,
  TAccountTakerTokenAccountA extends string,
  TAccountTakerTokenAccountB extends string,
  TAccountMakerTokenAccountB extends string,
  TAccountOffer extends string,
  TAccountVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ESCROW_PROGRAM_ADDRESS,
>(
  input: TakeOfferAsyncInput<
    TAccountTaker,
    TAccountMaker,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountMakerTokenAccountB,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  TakeOfferInstruction<
    TProgramAddress,
    TAccountTaker,
    TAccountMaker,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountMakerTokenAccountB,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? ESCROW_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    taker: { value: input.taker ?? null, isWritable: true },
    maker: { value: input.maker ?? null, isWritable: true },
    tokenMintA: { value: input.tokenMintA ?? null, isWritable: false },
    tokenMintB: { value: input.tokenMintB ?? null, isWritable: false },
    takerTokenAccountA: {
      value: input.takerTokenAccountA ?? null,
      isWritable: true,
    },
    takerTokenAccountB: {
      value: input.takerTokenAccountB ?? null,
      isWritable: true,
    },
    makerTokenAccountB: {
      value: input.makerTokenAccountB ?? null,
      isWritable: true,
    },
    offer: { value: input.offer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.takerTokenAccountA.value) {
    accounts.takerTokenAccountA.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.taker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintA.value)),
      ],
    });
  }
  if (!accounts.takerTokenAccountB.value) {
    accounts.takerTokenAccountB.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.taker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintB.value)),
      ],
    });
  }
  if (!accounts.makerTokenAccountB.value) {
    accounts.makerTokenAccountB.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.maker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintB.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.offer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintA.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.taker),
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.tokenMintA),
      getAccountMeta(accounts.tokenMintB),
      getAccountMeta(accounts.takerTokenAccountA),
      getAccountMeta(accounts.takerTokenAccountB),
      getAccountMeta(accounts.makerTokenAccountB),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getTakeOfferInstructionDataEncoder().encode({}),
  } as TakeOfferInstruction<
    TProgramAddress,
    TAccountTaker,
    TAccountMaker,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountMakerTokenAccountB,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type TakeOfferInput<
  TAccountTaker extends string = string,
  TAccountMaker extends string = string,
  TAccountTokenMintA extends string = string,
  TAccountTokenMintB extends string = string,
  TAccountTakerTokenAccountA extends string = string,
  TAccountTakerTokenAccountB extends string = string,
  TAccountMakerTokenAccountB extends string = string,
  TAccountOffer extends string = string,
  TAccountVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  taker: TransactionSigner<TAccountTaker>;
  maker: Address<TAccountMaker>;
  tokenMintA: Address<TAccountTokenMintA>;
  tokenMintB: Address<TAccountTokenMintB>;
  takerTokenAccountA: Address<TAccountTakerTokenAccountA>;
  takerTokenAccountB: Address<TAccountTakerTokenAccountB>;
  makerTokenAccountB: Address<TAccountMakerTokenAccountB>;
  offer: Address<TAccountOffer>;
  vault: Address<TAccountVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getTakeOfferInstruction<
  TAccountTaker extends string,
  TAccountMaker extends string,
  TAccountTokenMintA extends string,
  TAccountTokenMintB extends string,
  TAccountTakerTokenAccountA extends string,
  TAccountTakerTokenAccountB extends string,
  TAccountMakerTokenAccountB extends string,
  TAccountOffer extends string,
  TAccountVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ESCROW_PROGRAM_ADDRESS,
>(
  input: TakeOfferInput<
    TAccountTaker,
    TAccountMaker,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountMakerTokenAccountB,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): TakeOfferInstruction<
  TProgramAddress,
  TAccountTaker,
  TAccountMaker,
  TAccountTokenMintA,
  TAccountTokenMintB,
  TAccountTakerTokenAccountA,
  TAccountTakerTokenAccountB,
  TAccountMakerTokenAccountB,
  TAccountOffer,
  TAccountVault,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ESCROW_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    taker: { value: input.taker ?? null, isWritable: true },
    maker: { value: input.maker ?? null, isWritable: true },
    tokenMintA: { value: input.tokenMintA ?? null, isWritable: false },
    tokenMintB: { value: input.tokenMintB ?? null, isWritable: false },
    takerTokenAccountA: {
      value: input.takerTokenAccountA ?? null,
      isWritable: true,
    },
    takerTokenAccountB: {
      value: input.takerTokenAccountB ?? null,
      isWritable: true,
    },
    makerTokenAccountB: {
      value: input.makerTokenAccountB ?? null,
      isWritable: true,
    },
    offer: { value: input.offer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.taker),
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.tokenMintA),
      getAccountMeta(accounts.tokenMintB),
      getAccountMeta(accounts.takerTokenAccountA),
      getAccountMeta(accounts.takerTokenAccountB),
      getAccountMeta(accounts.makerTokenAccountB),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getTakeOfferInstructionDataEncoder().encode({}),
  } as TakeOfferInstruction<
    TProgramAddress,
    TAccountTaker,
    TAccountMaker,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountMakerTokenAccountB,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedTakeOfferInstruction<
  TProgram extends string = typeof ESCROW_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    taker: TAccountMetas[0];
    maker: TAccountMetas[1];
    tokenMintA: TAccountMetas[2];
    tokenMintB: TAccountMetas[3];
    takerTokenAccountA: TAccountMetas[4];
    takerTokenAccountB: TAccountMetas[5];
    makerTokenAccountB: TAccountMetas[6];
    offer: TAccountMetas[7];
    vault: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
  };
  data: TakeOfferInstructionData;
};

export function parseTakeOfferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTakeOfferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      taker: getNextAccount(),
      maker: getNextAccount(),
      tokenMintA: getNextAccount(),
      tokenMintB: getNextAccount(),
      takerTokenAccountA: getNextAccount(),
      takerTokenAccountB: getNextAccount(),
      makerTokenAccountB: getNextAccount(),
      offer: getNextAccount(),
      vault: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getTakeOfferInstructionDataDecoder().decode(instruction.data),
  };
}
